{"version":3,"sources":["../../../api/v1/routes/userroute.js"],"names":["router","express","Router","checkUserId","param","req","res","next","id","database","query","result","rowCount","status","send","message","user","rows","isAdmin","error","post","adminAuth","userController","createAccount","logIn","get","authenticate","getAllUsers","getUserById","put","updateUser","delete","deleteUser"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA,IAAMC,cAAcH,OAAOI,KAAP,CAAa,IAAb;AAAA,sFAAmB,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAAuBC,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEdC,mBAASC,KAAT,CAAe,qDAAf,EAAsE,CAACF,EAAD,CAAtE,CAFc;;AAAA;AAE7BG,kBAF6B;;AAAA,kBAG/BA,OAAOC,QAAP,IAAmB,CAHY;AAAA;AAAA;AAAA;;AAIjCN,gBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,4BAA0BP,EAA1B,oBAAF,EAArB;AAJiC;;AAAA;AAQ7BQ,gBAR6B,GAQtBL,OAAOM,IAAP,CAAY,CAAZ,CARsB;;AAAA,gBAS9BD,KAAKE,OATyB;AAAA;AAAA;AAAA;;AAUjCZ,gBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEK,OAAO,EAAEJ,SAAS,cAAX,EAAT,EAArB;AAViC;;AAAA;AAanCV,gBAAIW,IAAJ,GAAWA,IAAX;AACAT;AAdmC;AAAA;;AAAA;AAAA;AAAA;AAe1BQ,mBAf0B,eAe1BA,OAf0B;;AAgBnCT,gBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEK,OAAO,EAAEJ,SAAS,mCAAX,EAAT,EAArB;;AAhBmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA,IAApB;;AAoBAf,OAAOoB,IAAP,CAAY,SAAZ,EAAuBC,qBAAvB,EAAkCC,yBAAeC,aAAjD;AACAvB,OAAOoB,IAAP,CAAY,QAAZ,EAAsBE,yBAAeE,KAArC;AACAxB,OAAOyB,GAAP,CAAW,QAAX,EAAqBC,wBAArB,EAAmCL,qBAAnC,EAA8CC,yBAAeK,WAA7D;AACA3B,OAAOyB,GAAP,CAAW,YAAX,EAAyBC,wBAAzB,EAAuCL,qBAAvC,EAAkDlB,WAAlD,EAA+DmB,yBAAeM,WAA9E;AACA5B,OAAO6B,GAAP,CAAW,YAAX,EAAyBH,wBAAzB,EAAuCL,qBAAvC,EAAkDlB,WAAlD,EAA+DmB,yBAAeQ,UAA9E;AACA9B,OAAO+B,MAAP,CAAc,YAAd,EAA4BL,wBAA5B,EAA0CL,qBAA1C,EAAqDlB,WAArD,EAAkEmB,yBAAeU,UAAjF;;kBAEehC,M","file":"userroute.js","sourcesContent":["import express from 'express';\r\nimport userController from '../controllers/usercontroller';\r\nimport { adminAuth, authenticate } from '../middleware/middleware';\r\nimport database from '../database';\r\n\r\nconst router = express.Router();\r\n\r\nconst checkUserId = router.param('id', async (req, res, next, id) => {\r\n  try {\r\n    const result = await database.query('SELECT id, email, is_admin FROM users WHERE id = $1', [id]);\r\n    if (result.rowCount <= 0) {\r\n      res.status(404).send({ message: `User with ID \"${id}\" was not found` });\r\n      return;\r\n    }\r\n\r\n    const user = result.rows[0];\r\n    if (!user.isAdmin) {\r\n      res.status(403).send({ error: { message: 'Unauthorized' } });\r\n      return;\r\n    }\r\n    req.user = user;\r\n    next();\r\n  } catch ({ message }) {\r\n    res.status(500).send({ error: { message: 'Database error while getting user' } });\r\n  }\r\n});\r\n\r\nrouter.post('/signup', adminAuth, userController.createAccount);\r\nrouter.post('/login', userController.logIn);\r\nrouter.get('/users', authenticate, adminAuth, userController.getAllUsers);\r\nrouter.get('/users/:id', authenticate, adminAuth, checkUserId, userController.getUserById);\r\nrouter.put('/users/:id', authenticate, adminAuth, checkUserId, userController.updateUser);\r\nrouter.delete('/users/:id', authenticate, adminAuth, checkUserId, userController.deleteUser);\r\n\r\nexport default router;\r\n"]}