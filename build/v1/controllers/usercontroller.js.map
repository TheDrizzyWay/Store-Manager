{"version":3,"sources":["../../../api/v1/controllers/usercontroller.js"],"names":["UserController","req","res","body","firstName","lastName","email","password","isAdmin","status","send","message","database","query","result","rowCount","hash","error","rows","userId","id","userPassword","jwt","generateToken","token","user","uFirstName","uLastName","uEmail","uPassword"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AAGA;;;;AACA;;;;;;IAEqBA,c;;;;;;;;2GACOC,G,EAAKC,G;;;;;;;4BAGzBD,IAAIE,I,kCADNC,S,EAAAA,S,uCAAY,E,uDAAIC,Q,EAAAA,Q,sCAAW,E,uBAAIC,K,aAAAA,K,EAAOC,Q,aAAAA,Q,EAAUC,O,aAAAA,O;;sBAG9C,CAACF,KAAD,IAAU,CAACC,Q;;;;;AACbL,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,kCAAX,EAArB;;;;oBAIG,oCAAeJ,QAAf,C;;;;;AACHL,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,8CAAX,EAArB;;;;oBAIG,mCAAcL,KAAd,C;;;;;AACHJ,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,wBAAX,EAArB;;;;;;uBAKmBC,mBAASC,KAAT,CAAe,0CAAf,EAA2D,CAACP,KAAD,CAA3D,C;;;AAAfQ,sB;;sBAEAA,OAAOC,QAAP,GAAkB,C;;;;;AACpBb,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,8BAAX,EAArB;;;;;uBAIiB,kCAAaJ,QAAb,C;;;AAAbS,oB;;uBAESJ,mBAASC,KAAT,kLAWb,CAACT,SAAD,EAAYC,QAAZ,EAAsBC,KAAtB,EAA6BU,IAA7B,EAAmCR,OAAnC,CAXa,C;;;AAAfM,sB;;;AAcAZ,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,2BAAX,EAArB;;;;;;AAESA,uB,eAAAA,O;;AACTT,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEO,OAAO,EAAEN,gBAAF,EAAT,EAArB;;;;;;;;;;;;;;;;;;;6GAIeV,G,EAAKC,G;;;;;;;6BACMD,IAAIE,I,EAAxBG,K,cAAAA,K,EAAOC,Q,cAAAA,Q;;sBAEX,CAACD,KAAD,IAAU,CAACC,Q;;;;;AACbL,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,2CAAX,EAArB;;;;;;uBAKqBC,mBAASC,KAAT,CAAe,iDAAf,EAAkE,CAACP,KAAD,CAAlE,C;;;AAAfQ,sB;;sBACFA,OAAOC,QAAP,IAAmB,C;;;;;AACrBb,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,qCAAX,EAArB;;;;gCAI6CG,OAAOI,IAAP,CAAY,CAAZ,C,EAAnCC,M,iBAAJC,E,EAAsBC,Y,iBAAVd,Q;;oBACf,qCAAgBA,QAAhB,EAA0Bc,YAA1B,C;;;;;AACHnB,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,yCAAX,EAArB;;;;;uBAIkBW,cAAIC,aAAJ,CAAkB,EAAEH,IAAID,MAAN,EAAlB,C;;;AAAdK,qB;;AACNtB,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEc,YAAF,EAASb,SAAS,oBAAlB,EAArB;;;;;;;AACSA,uB,gBAAAA,O;;AACTT,oBACGO,MADH,CACU,GADV,EAEGC,IAFH,CAEQ,EAAEO,OAAO,EAAEN,SAAS,sDAAX,EAAT,EAFR;;;;;;;;;;;;;;;;;;;6GAMqBV,G,EAAKC,G;;;;;;;;uBAELU,mBAASC,KAAT,CAAe,qBAAf,C;;;AAAfC,sB;;AACNZ,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBI,OAAOI,IAA5B;;;;;;;AACSP,uB,gBAAAA,O;;AACTT,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEO,OAAO,EAAEN,gBAAF,EAAT,EAArB;;;;;;;;;;;;;;;;;;;6GAIqBV,G,EAAKC,G;;;;;;AACpBkB,kB,GAAOnB,IAAIwB,I,CAAXL,E;;;uBAEeR,mBAASC,KAAT,CAAe,mCAAf,EAAoD,CAACO,EAAD,CAApD,C;;;AAAfN,sB;;AACNZ,oBAAIQ,IAAJ,CAASI,OAAOI,IAAP,CAAY,CAAZ,CAAT;;;;;;;AACSP,uB,gBAAAA,O;;AACTT,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEO,OAAO,EAAEN,gBAAF,EAAT,EAArB;;;;;;;;;;;;;;;;;;;6GAIoBV,G,EAAKC,G;;;;;;;4BAGvBD,IAAIwB,I,EADKC,U,aAAXtB,S,EAAiCuB,S,aAAVtB,Q,EAA4BuB,M,aAAPtB,K,EAAyBuB,S,aAAVtB,Q,EAAqBa,E,aAAAA,E;yBAI9EnB,IAAIE,IAAJ,IAAY,E,EADdC,S,UAAAA,S,EAAWC,Q,UAAAA,Q,EAAUC,K,UAAAA,K,EAAOC,Q,UAAAA,Q;;;uBAItBK,mBAASC,KAAT,CACJ,yFADI,EAEJ,CAACT,aAAasB,UAAd,EAA0BrB,YAAYsB,SAAtC,EAAiDrB,SAASsB,MAA1D,EAAkErB,YAAYsB,SAA9E,EAAyFT,EAAzF,CAFI,C;;;;AAKNlB,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,mCAAX,EAArB;;;;;;;AACSA,uB,gBAAAA,O;;AACTT,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEO,OAAO,EAAEN,gBAAF,EAAT,EAArB;;;;;;;;;;;;;;;;;;;8GAIoBV,G,EAAKC,G;;;;;;AACnBkB,kB,GAAOnB,IAAIwB,I,CAAXL,E;;;uBAEeR,mBAASC,KAAT,CAAe,iCAAf,EAAkD,CAACO,EAAD,CAAlD,C;;;AAAfN,sB;;AACN,oBAAIA,OAAOC,QAAP,GAAkB,CAAtB,EAAyBb,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;;;;;;AAChBC,uB,gBAAAA,O;;AACTT,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEO,OAAO,EAAEN,gBAAF,EAAT,EAArB;;;;;;;;;;;;;;;;;;;;kBA/HeX,c","file":"usercontroller.js","sourcesContent":["import {\r\n  passwordLength, validateEmail, comparePassword, hashPassword,\r\n} from '../helpers/inputvalidator';\r\nimport database from '../database';\r\nimport jwt from '../helpers/jwt';\r\n\r\nexport default class UserController {\r\n\tstatic async createAccount(req, res) {\r\n    const {\r\n      firstName = '', lastName = '', email, password, isAdmin,\r\n    } = req.body;\r\n\r\n    if (!email || !password) {\r\n      res.status(400).send({ message: 'Email and password are required.' });\r\n      return;\r\n    }\r\n\r\n    if (!passwordLength(password)) {\r\n      res.status(400).send({ message: 'Password must be at least 6 characters long.' });\r\n      return;\r\n    }\r\n\r\n    if (!validateEmail(email)) {\r\n      res.status(400).send({ message: 'Invalid email address.' });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      let result = await database.query('SELECT email FROM users WHERE email = $1', [email]);\r\n\r\n      if (result.rowCount > 0) {\r\n        res.status(409).send({ message: 'Email is already registered.' });\r\n        return;\r\n      }\r\n\r\n      const hash = await hashPassword(password);\r\n\r\n      result = await database.query(\r\n        `INSERT INTO users \r\n      (\r\n        firstName,\r\n        lastName,\r\n        email,\r\n        password,\r\n        isAdmin)\r\n        VALUES\r\n        ($1, $2, $3, $4, $5)\r\n      `,\r\n        [firstName, lastName, email, hash, isAdmin],\r\n      );\r\n\r\n      res.status(201).send({ message: 'user created successfully' });\r\n      return;\r\n    } catch ({ message }) {\r\n      res.status(500).send({ error: { message } });\r\n    }\r\n  }\r\n\r\n  static async logIn(req, res) {\r\n    const { email, password } = req.body;\r\n\r\n    if (!email || !password) {\r\n      res.status(400).send({ message: 'Please provide email & password to login.' });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = await database.query('SELECT id, password FROM users WHERE email = $1', [email]);\r\n      if (result.rowCount <= 0) {\r\n        res.status(401).send({ message: 'Invalid email/password combination.' });\r\n        return;\r\n      }\r\n\r\n      const { id: userId, password: userPassword } = result.rows[0];\r\n      if (!comparePassword(password, userPassword)) {\r\n        res.status(401).send({ message: 'Invalid email and password combination.' });\r\n        return;\r\n      }\r\n\r\n      const token = await jwt.generateToken({ id: userId });\r\n      res.status(200).send({ token, message: 'You are logged in.' });\r\n    } catch ({ message }) {\r\n      res\r\n        .status(500)\r\n        .send({ error: { message: 'Server encountered a problem while trying to log in.' } });\r\n    }\r\n  }\r\n\r\n  static async getAllUsers(req, res) {\r\n    try {\r\n      const result = await database.query('SELECT * FROM users');\r\n      res.status(200).send(result.rows);\r\n    } catch ({ message }) {\r\n      res.status(500).send({ error: { message } });\r\n    }\r\n  }\r\n\r\n  static async getUserById(req, res) {\r\n    const { id } = req.user;\r\n    try {\r\n      const result = await database.query('SELECT * FROM users WHERE id = $1', [id]);\r\n      res.send(result.rows[0]);\r\n    } catch ({ message }) {\r\n      res.status(500).send({ error: { message } });\r\n    }\r\n  }\r\n\r\n  static async updateUser(req, res) {\r\n    const {\r\n      firstName: uFirstName, lastName: uLastName, email: uEmail, password: uPassword, id,\r\n    } = req.user;\r\n    const {\r\n      firstName, lastName, email, password,\r\n    } = req.body || {};\r\n\r\n    try {\r\n      await database.query(\r\n        'UPDATE users SET firstName = $1, lastName = $2, email = $3, password = $4 WHERE id = $5',\r\n        [firstName || uFirstName, lastName || uLastName, email || uEmail, password || uPassword, id],\r\n      );\r\n\r\n      res.status(200).send({ message: 'User details updated successfully' });\r\n    } catch ({ message }) {\r\n      res.status(500).send({ error: { message } });\r\n    }\r\n  }\r\n\r\n  static async deleteUser(req, res) {\r\n    const { id } = req.user;\r\n    try {\r\n      const result = await database.query('DELETE FROM users WHERE id = $1', [id]);\r\n      if (result.rowCount > 0) res.status(204).send();\r\n    } catch ({ message }) {\r\n      res.status(500).send({ error: { message } });\r\n    }\r\n  }\r\n}\r\n"]}