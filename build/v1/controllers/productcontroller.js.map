{"version":3,"sources":["../../../api/v1/controllers/productcontroller.js"],"names":["ProductController","req","res","body","name","price","quantity","minimumQuantity","imgUrl","status","send","message","database","query","result","rowCount","error","rows","id","product","pName","pPrice","pQuantity","pMinimumQuantity","pImgUrl"],"mappings":"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","file":"productcontroller.js","sourcesContent":["import { validateUrl } from '../helpers/inputvalidator';\r\nimport database from '../database';\r\n\r\nexport default class ProductController {\r\n\tstatic async createProduct(req, res) {\r\n    const {\r\n      name = '', price = '', quantity = '', minimumQuantity = '', imgUrl,\r\n    } = req.body;\r\n\r\n    if (!name || !price || !quantity || !minimumQuantity || !imgUrl) {\r\n      res.status(400).send({ message: 'All fields are required.' });\r\n      return;\r\n    }\r\n\r\n    if (!validateUrl(imgUrl)) {\r\n      res.status(400).send({ message: 'Invalid image link.' });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      let result = await database.query('SELECT name FROM products WHERE name = $1', [name]);\r\n\r\n      if (result.rowCount > 0) {\r\n        res.status(409).send({ message: 'This product already exists.' });\r\n        return;\r\n      }\r\n\r\n      result = await database.query(\r\n        `INSERT INTO products \r\n      (\r\n        name,\r\n        price,\r\n        quantity,\r\n        minimumQuantity,\r\n        imgUrl)\r\n        VALUES\r\n        ($1, $2, $3, $4, $5)\r\n      `,\r\n        [name, price, quantity, minimumQuantity, imgUrl],\r\n      );\r\n\r\n      res.status(201).send({ message: 'Product created successfully' });\r\n      return;\r\n    } catch ({ message }) {\r\n      res.status(500).send({ error: { message } });\r\n    }\r\n  }\r\n\r\n  static async getAllProducts(req, res) {\r\n    try {\r\n      const result = await database.query('SELECT * FROM products');\r\n      res.status(200).send(result.rows);\r\n    } catch ({ message }) {\r\n      res.status(500).send({ error: { message } });\r\n    }\r\n  }\r\n\r\n  static async getProductById(req, res) {\r\n    const { id } = req.product;\r\n    try {\r\n      const result = await database.query('SELECT * FROM products WHERE id = $1', [id]);\r\n      res.send(result.rows[0]);\r\n    } catch ({ message }) {\r\n      res.status(500).send({ error: { message } });\r\n    }\r\n  }\r\n\r\n  static async updateProduct(req, res) {\r\n    const {\r\n      name: pName, price: pPrice, quantity: pQuantity, minimumQuantity: pMinimumQuantity, imgUrl: pImgUrl, id,\r\n    } = req.product;\r\n    const {\r\n      name, price, quantity, minimumQuantity, imgUrl\r\n    } = req.body || {};\r\n\r\n    try {\r\n      await database.query(\r\n        'UPDATE products SET name = $1, price = $2, quantity = $3, minimumQuantity = $4, imgUrl = $5 WHERE id = $6',\r\n        [name || pName, price || pPrice, quantity || pQuantity, minimumQuantity || pMinimumQuantity, imgUrl || pImgUrl, id],\r\n      );\r\n\r\n      res.status(200).send({ message: 'Product details updated successfully' });\r\n    } catch ({ message }) {\r\n      res.status(500).send({ error: { message } });\r\n    }\r\n  }\r\n\r\n  static async deleteProduct(req, res) {\r\n    const { id } = req.product;\r\n    try {\r\n      const result = await database.query('DELETE FROM products WHERE id = $1', [id]);\r\n      if (result.rowCount > 0) res.status(204).send();\r\n    } catch ({ message }) {\r\n      res.status(500).send({ error: { message } });\r\n    }\r\n  }\r\n}\r\n"]}