{"version":3,"sources":["../../../api/v1/controllers/categorycontroller.js"],"names":["CategoryController","req","res","body","name","description","status","send","message","database","query","result","rowCount","error","rows","id","category","cName","cDescription"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqBA,kB;;;;;;;;2GACQC,G,EAAKC,G;;;;;;;4BAG1BD,IAAIE,I,6BADNC,I,EAAAA,I,kCAAO,E,qDAAIC,W,EAAAA,W,yCAAc,E;;sBAGvB,CAACD,IAAD,IAAS,CAACC,W;;;;;AACZH,oBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,0BAAX,EAArB;;;;;;uBAKmBC,mBAASC,KAAT,CAAe,2CAAf,EAA4D,CAACN,IAAD,CAA5D,C;;;AAAfO,sB;;sBAEAA,OAAOC,QAAP,GAAkB,C;;;;;AACpBV,oBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,+BAAX,EAArB;;;;;uBAIaC,mBAASC,KAAT,oHAQb,CAACN,IAAD,EAAOC,WAAP,CARa,C;;;AAAfM,sB;;;AAWAT,oBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,+BAAX,EAArB;;;;;;AAESA,uB,eAAAA,O;;AACTN,oBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEM,OAAO,EAAEL,gBAAF,EAAT,EAArB;;;;;;;;;;;;;;;;;;;6GAI0BP,G,EAAKC,G;;;;;;;;uBAEVO,mBAASC,KAAT,CAAe,0BAAf,C;;;AAAfC,sB;;AACNT,oBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBI,OAAOG,IAA5B;;;;;;;AACSN,uB,gBAAAA,O;;AACTN,oBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEM,OAAO,EAAEL,gBAAF,EAAT,EAArB;;;;;;;;;;;;;;;;;;;6GAIyBP,G,EAAKC,G;;;;;;AACxBa,kB,GAAOd,IAAIe,Q,CAAXD,E;;;uBAEeN,mBAASC,KAAT,CAAe,wCAAf,EAAyD,CAACK,EAAD,CAAzD,C;;;AAAfJ,sB;;AACNT,oBAAIK,IAAJ,CAASI,OAAOG,IAAP,CAAY,CAAZ,CAAT;;;;;;;AACSN,uB,gBAAAA,O;;AACTN,oBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEM,OAAO,EAAEL,gBAAF,EAAT,EAArB;;;;;;;;;;;;;;;;;;;6GAIwBP,G,EAAKC,G;;;;;;;gCAG3BD,IAAIe,Q,EADAC,K,iBAANb,I,EAA0Bc,Y,iBAAbb,W,EAA2BU,E,iBAAAA,E;wBAItCd,IAAIE,IAAJ,IAAY,E,EADdC,I,SAAAA,I,EAAMC,W,SAAAA,W;;;uBAIAI,mBAASC,KAAT,CACJ,iEADI,EAEJ,CAACN,QAAQa,KAAT,EAAgBZ,eAAea,YAA/B,EAA6CH,EAA7C,CAFI,C;;;;AAKNb,oBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,uCAAX,EAArB;;;;;;;AACSA,uB,gBAAAA,O;;AACTN,oBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEM,OAAO,EAAEL,gBAAF,EAAT,EAArB;;;;;;;;;;;;;;;;;;;8GAIwBP,G,EAAKC,G;;;;;;AACvBa,kB,GAAOd,IAAIe,Q,CAAXD,E;;;uBAEeN,mBAASC,KAAT,CAAe,sCAAf,EAAuD,CAACK,EAAD,CAAvD,C;;;AAAfJ,sB;;AACN,oBAAIA,OAAOC,QAAP,GAAkB,CAAtB,EAAyBV,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;;;;;;AAChBC,uB,gBAAAA,O;;AACTN,oBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEM,OAAO,EAAEL,gBAAF,EAAT,EAArB;;;;;;;;;;;;;;;;;;;;kBAlFeR,kB","file":"categorycontroller.js","sourcesContent":["import database from '../database';\r\n\r\nexport default class CategoryController {\r\n\tstatic async createCategory(req, res) {\r\n    const {\r\n      name = '', description = '',\r\n    } = req.body;\r\n\r\n    if (!name || !description) {\r\n      res.status(400).send({ message: 'All fields are required.' });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      let result = await database.query('SELECT name FROM products WHERE name = $1', [name]);\r\n\r\n      if (result.rowCount > 0) {\r\n        res.status(409).send({ message: 'This category already exists.' });\r\n        return;\r\n      }\r\n\r\n      result = await database.query(\r\n        `INSERT INTO categories \r\n      (\r\n        name,\r\n        description)\r\n        VALUES\r\n        ($1, $2)\r\n      `,\r\n        [name, description],\r\n      );\r\n\r\n      res.status(201).send({ message: 'Category created successfully' });\r\n      return;\r\n    } catch ({ message }) {\r\n      res.status(500).send({ error: { message } });\r\n    }\r\n  }\r\n\r\n  static async getAllCategories(req, res) {\r\n    try {\r\n      const result = await database.query('SELECT * FROM categories');\r\n      res.status(200).send(result.rows);\r\n    } catch ({ message }) {\r\n      res.status(500).send({ error: { message } });\r\n    }\r\n  }\r\n\r\n  static async getCategoryById(req, res) {\r\n    const { id } = req.category;\r\n    try {\r\n      const result = await database.query('SELECT * FROM categories WHERE id = $1', [id]);\r\n      res.send(result.rows[0]);\r\n    } catch ({ message }) {\r\n      res.status(500).send({ error: { message } });\r\n    }\r\n  }\r\n\r\n  static async updateCategory(req, res) {\r\n    const {\r\n      name: cName, description: cDescription, id,\r\n    } = req.category;\r\n    const {\r\n      name, description,\r\n    } = req.body || {};\r\n\r\n    try {\r\n      await database.query(\r\n        'UPDATE categories SET name = $1, description = $2 WHERE id = $3',\r\n        [name || cName, description || cDescription, id],\r\n      );\r\n\r\n      res.status(200).send({ message: 'Category details updated successfully' });\r\n    } catch ({ message }) {\r\n      res.status(500).send({ error: { message } });\r\n    }\r\n  }\r\n\r\n  static async deleteCategory(req, res) {\r\n    const { id } = req.category;\r\n    try {\r\n      const result = await database.query('DELETE FROM categories WHERE id = $1', [id]);\r\n      if (result.rowCount > 0) res.status(204).send();\r\n    } catch ({ message }) {\r\n      res.status(500).send({ error: { message } });\r\n    }\r\n  }\r\n}\r\n"]}